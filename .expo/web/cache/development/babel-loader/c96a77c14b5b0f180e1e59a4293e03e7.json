{"ast":null,"code":"import { openDatabase } from 'expo-sqlite';\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar openDb = function openDb() {\n  if (Platform.OS === \"web\") {\n    return {\n      transaction: function transaction() {\n        return {\n          executeSql: function executeSql() {}\n        };\n      }\n    };\n  }\n\n  var db = openDatabase('csgoSkins');\n  return db;\n};\n\nvar createDbTable = function createDbTable() {\n  db = openDb();\n  db.transaction(function (trx) {\n    trx.executeSql(\"Create table if not exists skins (id INTEGER PRIMARY KEY AUTOINCREMENT, skinName TEXT, icon_url TEXT, rarity TEXT, exterior TEXT)\", [], function (txObj, resultSet) {\n      return console.log(\"Success table created\");\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar addToDb = function addToDb(skinName, icon_url, rarity, exterior) {\n  db = openDb();\n  db.transaction(function (trx) {\n    trx.executeSql(\"Insert into skins (skinName , icon_url , rarity , exterior) VALUES (?, ?, ?, ?)\", [skinName, icon_url, rarity, exterior], function (txObj, resultSet) {\n      return null;\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar fetchAllData = function fetchAllData(successCallback) {\n  if (Platform.OS === \"web\") {\n    webFetchAllData(successCallback);\n  } else {\n    mobileFetchAllData(successCallback);\n  }\n};\n\nvar mobileFetchAllData = function mobileFetchAllData(successCallback) {\n  db = openDb();\n  db.transaction(function (trx) {\n    trx.executeSql(\"SELECT * from skins\", [], function (txObj, _ref) {\n      var _array = _ref.rows._array;\n      return successCallback(_array);\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar webFetchAllData = function webFetchAllData(successCallback) {\n  db = openDb();\n  db.transaction(function (trx) {\n    trx.executeSql(\"SELECT * from skins\", [], function (txObj, resultsSet) {\n      return successCallback(resultsSet.rows);\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar fetchSpecificData = function fetchSpecificData(query, successCallback) {\n  if (Platform.OS === \"web\") {\n    webFetchSpecificData(query, successCallback);\n  } else {\n    mobileFetchSpecificData(query, successCallback);\n  }\n};\n\nvar mobileFetchSpecificData = function mobileFetchSpecificData(query, successCallback) {\n  db = openDb();\n  db.transaction(function (trx) {\n    trx.executeSql(\"SELECT * from skins where skinName like '%' || ? || '%'\", [query], function (txObj, _ref2) {\n      var _array = _ref2.rows._array;\n      return successCallback(_array);\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar webFetchSpecificData = function webFetchSpecificData(query, successCallback) {\n  db = openDb();\n  console.log(query);\n  db.transaction(function (trx) {\n    trx.executeSql(\"SELECT * from skins where skinName like '%' || ? || '%'\", [query], function (txObj, resultsSet) {\n      return successCallback(resultsSet.rows);\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nexport { createDbTable, addToDb, fetchAllData, fetchSpecificData };","map":{"version":3,"sources":["C:/Users/Josel/OneDrive/Desktop/csgoSimulator/DBConnection.js"],"names":["openDatabase","openDb","Platform","OS","transaction","executeSql","db","createDbTable","trx","txObj","resultSet","console","log","error","addToDb","skinName","icon_url","rarity","exterior","fetchAllData","successCallback","webFetchAllData","mobileFetchAllData","_array","rows","resultsSet","fetchSpecificData","query","webFetchSpecificData","mobileFetchSpecificData"],"mappings":"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","sourcesContent":["import {openDatabase} from 'expo-sqlite'\r\nimport {Platform} from 'react-native'\r\n\r\n//const db = openDatabase('csgoSkins')\r\n\r\nconst openDb =  () => {\r\n    if(Platform.OS === \"web\"){\r\n        return {\r\n            transaction: () => {\r\n                return {\r\n                    executeSql: () => {},\r\n                };\r\n            },\r\n        };\r\n    }\r\n    const db = openDatabase('csgoSkins')\r\n    return db;\r\n}\r\n\r\nconst createDbTable = () => {\r\n    db = openDb();\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"Create table if not exists skins (id INTEGER PRIMARY KEY AUTOINCREMENT, skinName TEXT, icon_url TEXT, rarity TEXT, exterior TEXT)\",[],\r\n            (txObj, resultSet) => console.log(\"Success table created\"),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nconst addToDb = (skinName, icon_url, rarity, exterior) => {\r\n    db = openDb();\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"Insert into skins (skinName , icon_url , rarity , exterior) VALUES (?, ?, ?, ?)\",[skinName, icon_url, rarity, exterior],\r\n            (txObj, resultSet) => null,\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\n\r\nconst fetchAllData = (successCallback) => {\r\n    if (Platform.OS === \"web\"){\r\n        webFetchAllData(successCallback)\r\n    }\r\n    else{\r\n        mobileFetchAllData(successCallback)\r\n    }\r\n}\r\n\r\nconst mobileFetchAllData = (successCallback) =>{\r\n    db = openDb();\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"SELECT * from skins\",[],\r\n            (txObj, {rows: {_array}}) => successCallback(_array),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nconst webFetchAllData = (successCallback) =>{\r\n    db = openDb();\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"SELECT * from skins\",[],\r\n            (txObj, resultsSet) => successCallback(resultsSet.rows),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\n\r\nconst fetchSpecificData = (query, successCallback) => {\r\n    if (Platform.OS === \"web\"){\r\n        webFetchSpecificData(query, successCallback)\r\n    }\r\n    else{\r\n        mobileFetchSpecificData(query, successCallback)\r\n    }\r\n}\r\n\r\nconst mobileFetchSpecificData = (query, successCallback) =>{\r\n    db = openDb();\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"SELECT * from skins where skinName like '%' || ? || '%'\", [query],\r\n            (txObj, {rows: {_array}}) => successCallback(_array),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nconst webFetchSpecificData = (query, successCallback) =>{\r\n    db = openDb();\r\n    console.log(query);\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"SELECT * from skins where skinName like '%' || ? || '%'\",[query],\r\n            (txObj, resultsSet) => successCallback(resultsSet.rows),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nexport {createDbTable, addToDb, fetchAllData, fetchSpecificData}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}