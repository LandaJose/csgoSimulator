{"ast":null,"code":"import _toArray from \"@babel/runtime/helpers/toArray\";\nimport { openDatabase } from 'expo-sqlite';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar db = openDatabase('csgoSkins');\n\nvar createDbTable = function createDbTable() {\n  db.transaction(function (trx) {\n    trx.executeSql(\"Create table if not exists skins (id INTEGER PRIMARY KEY AUTOINCREMENT, skinName TEXT, icon_url TEXT, rarity TEXT, exterior TEXT)\", [], function (txObj, resultSet) {\n      return console.log(\"Success\");\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar addToDb = function addToDb(skinName, icon_url, rarity, exterior) {\n  db.transaction(function (trx) {\n    trx.executeSql(\"Insert into skins (skinName , icon_url , rarity , exterior) VALUES (?, ?, ?, ?)\", [skinName, icon_url, rarity, exterior], function (txObj, resultSet) {\n      return console.log(\"Success\", resultSet);\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar fetchAllData = function fetchAllData(successCallback) {\n  fetchData(\"SELECT * from skins\", [], successCallback);\n};\n\nvar fetchSpecificData = function fetchSpecificData(where, successCallback) {\n  fetchData(\"SELECT * from skins where name like '%?%'\", [where], successCallback);\n};\n\nvar fetchData = function fetchData(query, _ref, successCallback) {\n  var _ref2 = _toArray(_ref);\n\n  if (Platform.OS === \"web\") {\n    webFetchData(query, successCallback);\n  } else {\n    mobileFetchData(query, successCallback);\n  }\n};\n\nvar mobileFetchData = function mobileFetchData(query, params, successCallback) {\n  db.transaction(function (trx) {\n    trx.executeSql(query, params, function (txObj, _ref3) {\n      var _array = _ref3.rows._array;\n      return successCallback(_array);\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar webFetchData = function webFetchData(query, params, successCallback) {\n  db.transaction(function (trx) {\n    trx.executeSql(query, params, function (txObj, resultsSet) {\n      return successCallback(resultsSet.rows);\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nexport { createDbTable, addToDb, fetchAllData };","map":{"version":3,"sources":["C:/Users/Josel/OneDrive/Desktop/csgoSimulator/DBConnection.js"],"names":["openDatabase","db","createDbTable","transaction","trx","executeSql","txObj","resultSet","console","log","error","addToDb","skinName","icon_url","rarity","exterior","fetchAllData","successCallback","fetchData","fetchSpecificData","where","query","Platform","OS","webFetchData","mobileFetchData","params","_array","rows","resultsSet"],"mappings":"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","sourcesContent":["import {openDatabase} from 'expo-sqlite'\r\nimport {Platform} from 'react-native'\r\n\r\nconst db = openDatabase('csgoSkins')\r\n\r\nconst createDbTable = () => {\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"Create table if not exists skins (id INTEGER PRIMARY KEY AUTOINCREMENT, skinName TEXT, icon_url TEXT, rarity TEXT, exterior TEXT)\",[],\r\n            (txObj, resultSet) => console.log(\"Success\"),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nconst addToDb = (skinName, icon_url, rarity, exterior) => {\r\n    // db.transaction(trx => {\r\n    //     trx.executeSql(\r\n    //         \"Create table if not exists skins (id INTEGER PRIMARY KEY AUTOINCREMENT, skinName TEXT, icon_url TEXT, rarity TEXT, exterior TEXT)\",[],\r\n    //         (txObj, resultSet) => console.log(\"Success\"),\r\n    //         (txObj, error) => console.log(\"Error\", error)\r\n    //     )\r\n    // })\r\n\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"Insert into skins (skinName , icon_url , rarity , exterior) VALUES (?, ?, ?, ?)\",[skinName, icon_url, rarity, exterior],\r\n            (txObj, resultSet) => console.log(\"Success\", resultSet),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nconst fetchAllData = (successCallback) => {\r\n    fetchData(\"SELECT * from skins\", [], successCallback)\r\n}\r\n\r\nconst fetchSpecificData = (where, successCallback) => {\r\n    fetchData(\"SELECT * from skins where name like '%?%'\",[where], successCallback)\r\n}\r\n\r\nconst fetchData = (query, [], successCallback) => {\r\n    if (Platform.OS === \"web\"){\r\n        webFetchData(query, successCallback)\r\n    }\r\n    else{\r\n        mobileFetchData(query, successCallback)\r\n    }\r\n}\r\n\r\nconst mobileFetchData = (query, params, successCallback) =>{\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            query,params,\r\n            (txObj, {rows: {_array}}) => successCallback(_array),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nconst webFetchData = (query, params, successCallback) =>{\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            query,params,\r\n            (txObj, resultsSet) => successCallback(resultsSet.rows),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nexport {createDbTable, addToDb, fetchAllData}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}