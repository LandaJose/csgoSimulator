{"ast":null,"code":"import { openDatabase } from 'expo-sqlite';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar db = openDatabase('csgoSkins');\n\nvar createDbTable = function createDbTable() {\n  db.transaction(function (trx) {\n    trx.executeSql(\"Create table if not exists skins (id INTEGER PRIMARY KEY AUTOINCREMENT, skinName TEXT, icon_url TEXT, rarity TEXT, exterior TEXT)\", [], function (txObj, resultSet) {\n      return console.log(\"Success table created\");\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar addToDb = function addToDb(skinName, icon_url, rarity, exterior) {\n  db.transaction(function (trx) {\n    trx.executeSql(\"Insert into skins (skinName , icon_url , rarity , exterior) VALUES (?, ?, ?, ?)\", [skinName, icon_url, rarity, exterior], function (txObj, resultSet) {\n      return null;\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar addToDbBulk = function addToDbBulk(data) {\n  db.transaction(function (trx) {\n    data.forEach(function (element) {\n      trx.executeSql(\"Insert into skins (skinName , icon_url , rarity , exterior) VALUES (?, ?, ?, ?)\", [element.skinName, element.icon_url, element.rarity, element.exterior], function (txObj, resultSet) {\n        return null;\n      }, function (txObj, error) {\n        return console.log(\"Error\", error);\n      });\n    });\n  });\n};\n\nvar fetchAllData = function fetchAllData(successCallback) {\n  if (Platform.OS === \"web\") {\n    webFetchAllData(successCallback);\n  } else {\n    mobileFetchAllData(successCallback);\n  }\n};\n\nvar mobileFetchAllData = function mobileFetchAllData(successCallback) {\n  db.transaction(function (trx) {\n    trx.executeSql(\"SELECT * from skins\", [], function (txObj, _ref) {\n      var _array = _ref.rows._array;\n      return successCallback(_array);\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar webFetchAllData = function webFetchAllData(successCallback) {\n  db.transaction(function (trx) {\n    trx.executeSql(\"SELECT * from skins\", [], function (txObj, resultsSet) {\n      return successCallback(resultsSet.rows);\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar fetchSpecificData = function fetchSpecificData(query, successCallback) {\n  if (Platform.OS === \"web\") {\n    webFetchSpecificData(query, successCallback);\n  } else {\n    mobileFetchSpecificData(query, successCallback);\n  }\n};\n\nvar mobileFetchSpecificData = function mobileFetchSpecificData(query, successCallback) {\n  db.transaction(function (trx) {\n    trx.executeSql(\"SELECT * from skins where skinName like '%' || ? || '%'\", [query], function (txObj, _ref2) {\n      var _array = _ref2.rows._array;\n      return successCallback(_array);\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nvar webFetchSpecificData = function webFetchSpecificData(query, successCallback) {\n  console.log(query);\n  db.transaction(function (trx) {\n    trx.executeSql(\"SELECT * from skins where skinName like '%' || ? || '%'\", [query], function (txObj, resultsSet) {\n      return successCallback(resultsSet.rows);\n    }, function (txObj, error) {\n      return console.log(\"Error\", error);\n    });\n  });\n};\n\nexport { createDbTable, addToDb, addToDbBulk, fetchAllData, fetchSpecificData };","map":{"version":3,"sources":["C:/Users/Josel/OneDrive/Desktop/csgoSimulator/DBConnection.js"],"names":["openDatabase","db","createDbTable","transaction","trx","executeSql","txObj","resultSet","console","log","error","addToDb","skinName","icon_url","rarity","exterior","addToDbBulk","data","forEach","element","fetchAllData","successCallback","Platform","OS","webFetchAllData","mobileFetchAllData","_array","rows","resultsSet","fetchSpecificData","query","webFetchSpecificData","mobileFetchSpecificData"],"mappings":"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","sourcesContent":["import {openDatabase} from 'expo-sqlite'\r\nimport {Platform} from 'react-native'\r\n\r\nconst db = openDatabase('csgoSkins')\r\n\r\nconst createDbTable = () => {\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"Create table if not exists skins (id INTEGER PRIMARY KEY AUTOINCREMENT, skinName TEXT, icon_url TEXT, rarity TEXT, exterior TEXT)\",[],\r\n            (txObj, resultSet) => console.log(\"Success table created\"),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nconst addToDb = (skinName, icon_url, rarity, exterior) => {\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"Insert into skins (skinName , icon_url , rarity , exterior) VALUES (?, ?, ?, ?)\",[skinName, icon_url, rarity, exterior],\r\n            (txObj, resultSet) => null,\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nconst addToDbBulk = (data) => {\r\n    db.transaction(trx => {\r\n        data.forEach(element => {\r\n            trx.executeSql(\r\n                \"Insert into skins (skinName , icon_url , rarity , exterior) VALUES (?, ?, ?, ?)\",[element.skinName, element.icon_url, element.rarity, element.exterior],\r\n                (txObj, resultSet) => null,\r\n                (txObj, error) => console.log(\"Error\", error)\r\n            )\r\n        });\r\n    })\r\n}\r\n\r\n\r\nconst fetchAllData = (successCallback) => {\r\n    if (Platform.OS === \"web\"){\r\n        webFetchAllData(successCallback)\r\n    }\r\n    else{\r\n        mobileFetchAllData(successCallback)\r\n    }\r\n}\r\n\r\nconst mobileFetchAllData = (successCallback) =>{\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"SELECT * from skins\",[],\r\n            (txObj, {rows: {_array}}) => successCallback(_array),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nconst webFetchAllData = (successCallback) =>{\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"SELECT * from skins\",[],\r\n            (txObj, resultsSet) => successCallback(resultsSet.rows),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\n\r\nconst fetchSpecificData = (query, successCallback) => {\r\n    if (Platform.OS === \"web\"){\r\n        webFetchSpecificData(query, successCallback)\r\n    }\r\n    else{\r\n        mobileFetchSpecificData(query, successCallback)\r\n    }\r\n}\r\n\r\nconst mobileFetchSpecificData = (query, successCallback) =>{\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"SELECT * from skins where skinName like '%' || ? || '%'\", [query],\r\n            (txObj, {rows: {_array}}) => successCallback(_array),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nconst webFetchSpecificData = (query, successCallback) =>{\r\n    console.log(query);\r\n    db.transaction(trx => {\r\n        trx.executeSql(\r\n            \"SELECT * from skins where skinName like '%' || ? || '%'\",[query],\r\n            (txObj, resultsSet) => successCallback(resultsSet.rows),\r\n            (txObj, error) => console.log(\"Error\", error)\r\n        )\r\n    })\r\n}\r\n\r\nexport {createDbTable, addToDb, addToDbBulk, fetchAllData, fetchSpecificData}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}